/* Holographic Text Effects */

/* Holographic Button */
.holo-btn {
  position: relative;
  border: 2px solid transparent;
  background: linear-gradient(120deg, #00fff0 0%, #a600ff 100%) border-box;
  background-clip: padding-box, border-box;
  color: #fff;
  box-shadow: 0 0 16px 2px rgba(0,255,255,0.3), 0 0 32px 4px rgba(166,0,255,0.15);
  transition: box-shadow 0.3s, border-color 0.3s;
  z-index: 1;
}
.holo-btn:hover, .holo-btn:focus {
  box-shadow: 0 0 24px 4px #00fff0, 0 0 48px 8px #a600ff;
  border-color: #00fff0;
}

/* Holographic Card/Panel Border */
.holo-card {
  border: 2px solid;
  border-image: linear-gradient(120deg, #00fff0 0%, #a600ff 100%);
  border-image-slice: 1;
  box-shadow: 0 0 24px 2px rgba(0,255,255,0.15), 0 0 32px 8px rgba(166,0,255,0.10);
  background: rgba(20, 20, 40, 0.8);
  border-radius: 1rem;
}

/* Holographic Divider */
.holo-divider {
  height: 4px;
  width: 100%;
  border-radius: 2px;
  background: linear-gradient(90deg, #00fff0 0%, #a600ff 100%);
  box-shadow: 0 0 8px 2px #00fff044, 0 0 8px 2px #a600ff44;
  margin: 2rem 0;
}

/* Holographic Spinner */
.holo-spinner {
  width: 48px;
  height: 48px;
  border: 4px solid #00fff0;
  border-top: 4px solid #a600ff;
  border-radius: 50%;
  animation: holo-spin 1s linear infinite;
  margin: auto;
}
@keyframes holo-spin {
  to { transform: rotate(360deg); }
}

/* Holographic Icon Accent */
.holo-icon {
  filter: drop-shadow(0 0 6px #00fff0) drop-shadow(0 0 12px #a600ff);
  color: #00fff0;
  transition: filter 0.2s, color 0.2s;
}
.holo-icon:hover, .holo-icon:focus {
  filter: drop-shadow(0 0 12px #a600ff) drop-shadow(0 0 24px #00fff0);
  color: #a600ff;
}

.holographic-text {
  position: relative;
  color: rgba(255, 255, 255, 0.9);
  font-weight: 600;
  text-shadow:
    0 0 5px rgba(0, 230, 255, 0.7),
    0 0 10px rgba(0, 230, 255, 0.5),
    0 0 15px rgba(0, 230, 255, 0.3),
    0 0 20px rgba(140, 0, 255, 0.2);
  animation: holoPulse 3s infinite alternate;
}

.holographic-text::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  background-image: linear-gradient(
    90deg,
    rgba(0, 255, 255, 0.7) 0%,
    rgba(255, 0, 255, 0.7) 25%,
    rgba(0, 255, 255, 0.7) 50%,
    rgba(255, 0, 255, 0.7) 75%,
    rgba(0, 255, 255, 0.7) 100%
  );
  background-size: 200% auto;
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: holoGradient 5s ease infinite;
}

.holographic-title {
  font-size: 2.5rem;
  letter-spacing: 2px;
  text-transform: uppercase;
  color: white;
  text-shadow:
    0 0 10px rgba(0, 230, 255, 0.8),
    0 0 20px rgba(0, 230, 255, 0.6),
    0 0 30px rgba(0, 230, 255, 0.4),
    0 0 40px rgba(140, 0, 255, 0.3);
}

.holographic-subtitle {
  font-size: 1.5rem;
  letter-spacing: 1px;
  color: white;
  text-shadow:
    0 0 8px rgba(0, 230, 255, 0.7),
    0 0 16px rgba(0, 230, 255, 0.5),
    0 0 24px rgba(0, 230, 255, 0.3);
}

/* Futuristic UI Elements */
.futuristic-container {
  background: linear-gradient(135deg, rgba(10, 10, 30, 0.9), rgba(5, 15, 40, 0.95));
  border: 1px solid rgba(0, 200, 255, 0.3);
  box-shadow:
    0 0 10px rgba(0, 200, 255, 0.2),
    inset 0 0 15px rgba(0, 150, 255, 0.1);
  border-radius: 8px;
  backdrop-filter: blur(5px);
}

.futuristic-input {
  background: rgba(5, 15, 30, 0.7) !important;
  border: 1px solid rgba(0, 200, 255, 0.4) !important;
  color: rgba(220, 240, 255, 0.9) !important;
  box-shadow: 0 0 8px rgba(0, 150, 255, 0.2) !important;
  transition: all 0.3s ease !important;
}

.futuristic-input:focus {
  border-color: rgba(0, 220, 255, 0.8) !important;
  box-shadow: 0 0 12px rgba(0, 180, 255, 0.4) !important;
}

.futuristic-button {
  background: linear-gradient(135deg, rgba(0, 100, 200, 0.8), rgba(0, 150, 255, 0.9)) !important;
  border: 1px solid rgba(0, 200, 255, 0.6) !important;
  box-shadow:
    0 0 10px rgba(0, 150, 255, 0.3),
    inset 0 0 5px rgba(255, 255, 255, 0.2) !important;
  color: white !important;
  text-shadow: 0 0 5px rgba(0, 200, 255, 0.7) !important;
  transition: all 0.3s ease !important;
  position: relative;
  overflow: hidden;
}

.futuristic-button::after {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    rgba(255, 255, 255, 0),
    rgba(255, 255, 255, 0),
    rgba(255, 255, 255, 0.1),
    rgba(255, 255, 255, 0)
  );
  transform: rotate(30deg);
  animation: buttonScan 3s linear infinite;
}

.futuristic-button:hover {
  background: linear-gradient(135deg, rgba(0, 120, 220, 0.9), rgba(0, 170, 255, 1)) !important;
  box-shadow:
    0 0 15px rgba(0, 180, 255, 0.5),
    inset 0 0 8px rgba(255, 255, 255, 0.3) !important;
}

/* Futuristic Dark Theme */
.futuristic-dark {
  background: linear-gradient(135deg, #050510, #0a0a20);
  color: rgba(220, 240, 255, 0.9);
}

.futuristic-dark-panel {
  background: rgba(15, 20, 40, 0.7);
  border: 1px solid rgba(0, 150, 255, 0.3);
  box-shadow: 0 0 15px rgba(0, 100, 255, 0.15);
  backdrop-filter: blur(10px);
}

/* Animations */
@keyframes holoPulse {
  0% {
    text-shadow:
      0 0 5px rgba(0, 230, 255, 0.7),
      0 0 10px rgba(0, 230, 255, 0.5),
      0 0 15px rgba(0, 230, 255, 0.3),
      0 0 20px rgba(140, 0, 255, 0.2);
  }
  100% {
    text-shadow:
      0 0 10px rgba(0, 230, 255, 0.9),
      0 0 20px rgba(0, 230, 255, 0.7),
      0 0 30px rgba(0, 230, 255, 0.5),
      0 0 40px rgba(140, 0, 255, 0.3);
  }
}

/* --- Accent Color Variables & Button Style --- */
:root { /* or .dark if specific to dark theme */
  --holographic-accent-color: #FFD700; /* Vibrant Gold/Yellow */
  --holographic-accent-hover-color: #FFA500; /* Vibrant Orange for hover */
}

.btn-accent {
  background-color: var(--holographic-accent-color) !important;
  border: 1px solid var(--holographic-accent-color) !important; /* Ensure border matches */
  color: #0A0A20 !important; /* Dark text for contrast */
  text-shadow: none !important;
  box-shadow: 0 0 8px rgba(255, 215, 0, 0.5); /* Subtle glow */
  transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
}

.btn-accent:hover, .btn-accent:focus {
  background-color: var(--holographic-accent-hover-color) !important;
  border-color: var(--holographic-accent-hover-color) !important;
  color: #000000 !important; /* Ensure text remains dark and readable */
  box-shadow: 0 0 12px var(--holographic-accent-hover-color), 0 0 18px var(--holographic-accent-color) !important;
}

/* --- New Glitch Text Animation Styles --- */
@keyframes glitch-animation {
  0% { text-shadow: -2px -2px 0 #ff00c1, 2px 2px 0 #00fff9; clip-path: inset(10% 0 80% 0); }
  20% { text-shadow: 2px 2px 0 #ff00c1, -2px -2px 0 #00fff9; clip-path: inset(40% 0 30% 0); }
  40% { text-shadow: -2px 2px 0 #ff00c1, 2px -2px 0 #00fff9; clip-path: inset(85% 0 5% 0); }
  60% { text-shadow: 2px -2px 0 #ff00c1, -2px 2px 0 #00fff9; clip-path: inset(50% 0 20% 0); }
  80% { text-shadow: -2px -2px 0 #ff00c1, 2px 2px 0 #00fff9; clip-path: inset(20% 0 70% 0); }
  100% { text-shadow: none; clip-path: inset(50% 0 50% 0); }
}
.holographic-text-glitch:hover, .holographic-text-glitch-active {
  animation: glitch-animation 0.5s infinite alternate;
}
.holographic-text:hover::before { /* Subtle glitch for general holographic text */
    content: attr(data-text);
    position: absolute;
    left: -1px; top: -1px;
    /* Consider a less intense shadow for the subtle glitch */
    text-shadow: 1px 0 rgba(255,0,255,0.7); /* Using magenta from your palette */
    opacity: 0.8;
    animation: glitch-subtle 0.4s cubic-bezier(.25,.46,.45,.94) both infinite alternate;
    z-index: 1; /* Ensure it's above the main text's pseudo-element if that exists */
}
@keyframes glitch-subtle {
    0% { transform: translate(0,0); opacity: 0; } 
    20% { transform: translate(-1px,1px); opacity: 0.3; } 
    40% { transform: translate(1px,-1px); opacity: 0.6; }
    60% { transform: translate(-1px,1px); opacity: 0.4; } 
    80% { transform: translate(1px,-1px); opacity: 0.7; } 
    100% { transform: translate(0,0); opacity: 0; }
}

/* --- New Scan Line Animation Style --- */
.futuristic-container-scanline::after { /* Apply to .futuristic-container or a new class */
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 3px; /* Scan line thickness */
  background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.5), transparent);
  animation: scanline-animation 4s linear infinite;
  opacity: 0.7;
  box-shadow: 0 0 5px rgba(0, 255, 255, 0.5);
  pointer-events: none; /* Ensure it doesn't interfere with interactions */
}
@keyframes scanline-animation {
  0% { transform: translateY(0%); }
  50% { transform: translateY(calc(100% - 3px)); } /* Needs to be dynamic if container height varies */
  /* For a more robust translateY, if container height is unknown, this animation might need JS or be applied only to fixed-height elements.
     A simpler version just animates top: */
  /* 0% { top: 0; } 50% { top: calc(100% - 3px); } 100% { top: 0; } */
  /* Using transform for potentially better performance: */
  100% { transform: translateY(0%); }
}
/* Add this to elements that will have the scanline to ensure overflow:hidden and position:relative */
.has-scanline {
    position: relative;
    overflow: hidden;
}

/* --- New Breaking Grid Effect --- */
.futuristic-grid-bg::after { /* New pseudo-element for breaks */
    content: '';
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background-image:
        linear-gradient(rgba(255, 0, 0, 0.5) 1.5px, transparent 1.5px), /* More visible red breaks */
        linear-gradient(90deg, rgba(255, 0, 0, 0.5) 1.5px, transparent 1.5px);
    background-size: 50px 50px; /* Different size for variation */
    opacity: 0;
    animation: breaking-grid-glitch 12s ease-in-out infinite;
    z-index: -1; /* Keep behind main grid if possible, ensure ::before is also z-index -1 or adjust */
    pointer-events: none;
}
@keyframes breaking-grid-glitch {
  0%, 90% { opacity: 0; clip-path: inset(50% 50% 50% 50%); } /* Mostly invisible and clipped */
  92% { opacity: 0.4; clip-path: inset(30% 40% 30% 40%); } /* Quick flash */
  94% { opacity: 0.2; clip-path: inset(45% 20% 45% 30%); }
  96%, 100% { opacity: 0; clip-path: inset(50% 50% 50% 50%); }
}
/* Ensure .futuristic-grid-bg itself has a z-index or its children do, so this doesn't overlay content.
   If .futuristic-grid-bg::before has z-index: -1, this also with z-index: -1 should be fine. */

@keyframes holoGradient {
  0% {
    background-position: 0% center;
  }
  50% {
    background-position: 100% center;
  }
  100% {
    background-position: 0% center;
  }
}

@keyframes buttonScan {
  0% {
    transform: translateX(-100%) translateY(-100%) rotate(30deg);
  }
  100% {
    transform: translateX(100%) translateY(100%) rotate(30deg);
  }
}

/* Holographic Glow Effect */
.holo-glow {
  position: relative;
}

.holo-glow::before {
  content: '';
  position: absolute;
  top: -5px;
  left: -5px;
  right: -5px;
  bottom: -5px;
  background: linear-gradient(45deg,
    rgba(0, 255, 255, 0) 0%,
    rgba(0, 255, 255, 0.3) 50%,
    rgba(0, 255, 255, 0) 100%
  );
  border-radius: inherit;
  z-index: -1;
  animation: glowPulse 2s infinite alternate;
}

@keyframes glowPulse {
  0% {
    opacity: 0.5;
    filter: blur(10px);
  }
  100% {
    opacity: 0.8;
    filter: blur(15px);
  }
}

/* Futuristic Grid Background */
.futuristic-grid-bg {
  position: relative;
  overflow: hidden;
}

.futuristic-grid-bg::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image:
    linear-gradient(rgba(0, 150, 255, 0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(0, 150, 255, 0.1) 1px, transparent 1px);
  background-size: 20px 20px;
  z-index: -1;
  animation: gridMove 20s linear infinite;
}

@keyframes gridMove {
  0% {
    background-position: 0 0;
  }
  100% {
    background-position: 20px 20px;
  }
}
